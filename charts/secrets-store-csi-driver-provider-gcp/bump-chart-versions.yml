name: Bump Helm Charts Versions

on:
  pull_request:
    types:
      - closed # Trigger when the PR is closed (merged or declined)
    branches:
      - main # When merged branch is main

jobs:
  bump_charts_version:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
    
    # Skip the job if the PR source branch does not start with 'release-'
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release-')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract release version
        run: |
          # Extract the version from the branch name (e.g., release-1.2 or release-1.2.3)
          VERSION=$(echo "${{ github.event.pull_request.head.ref }}" | sed -E 's/^release-([0-9]+\.[0-9]+(\.[0-9]+)?)$/\1/')
          
          # Check if the version matches the expected format
          if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
            echo "The PR was merged from a release branch with version: $VERSION"
            # Ensure the version follows x.x.x format for binary release
            if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+$ ]]; then
              VERSION="${VERSION}.0"
            fi
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo $VERSION
          else
            echo "Invalid branch name format. The release branch must match 'release-X.X' or 'release-X.X.X'."
            exit 1
          fi

      - name: Validate version
        run: |
          if [[ -z "$VERSION" ]]; then
            echo "Error: Version not found. Branch should follow 'release-<version>' pattern."
            exit 1
          fi

      - name: Fetch tags
        run: git fetch --tags

      - name: Install yq
        run: |
          # Install yq to parse YAML files
          wget https://github.com/mikefarah/yq/releases/download/v4.16.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
      
      - name: Set up Git user identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: "Auth to GCP exist env"
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: "secretmanager-csi"

      - name: Extract latest release image digest
        id: extract_latest_digest
        run: |
          # Extract the image digest from the build process
          IMAGE=asia-docker.pkg.dev/secretmanager-csi/secrets-store-csi-driver-provider-gcp/plugin:v${VERSION}
          IMAGE_DIGEST=$(gcloud artifacts docker images describe "$IMAGE" --format='get(image_summary.digest)')

          if [[ -z "$IMAGE_DIGEST" ]]; then
            echo "Failed to get image digest."
            exit 1
          fi

          echo "Extracted digest: $IMAGE_DIGEST"

          # Save the digest to an environment variable
          echo "DIGEST=$IMAGE_DIGEST" >> $GITHUB_ENV

      - name: Pull latest changes from remote
        run: |
          git pull --rebase origin main

      - name: Update helm chart with latest releases
        run: |
          # Update the version in the charts/secrets-store-csi-driver-provider-gcp/Chart.yaml file
          LAST_VERSION_TO_UPDATE=$VERSION
          if [[ -z "$VERSION" ]]; then
            echo "No last release tag found. Skipping version update."
          else
            LAST_VERSION_TO_UPDATE=$VERSION
          fi

          echo "Updating Chart.yaml with version $LAST_VERSION_TO_UPDATE"
          
          yq e ".appVersion = \"$LAST_VERSION_TO_UPDATE\"" -i charts/secrets-store-csi-driver-provider-gcp/Chart.yaml
          yq e ".appVersion = \"$LAST_VERSION_TO_UPDATE\"" -i manifest_staging/charts/secrets-store-csi-driver-provider-gcp/Chart.yaml

          git add charts/secrets-store-csi-driver-provider-gcp/Chart.yaml
          git add manifest_staging/charts/secrets-store-csi-driver-provider-gcp/Chart.yaml

          # Check if there are any changes
          if git diff --cached --exit-code; then
            echo "No changes detected. Skipping commit."
          else
            echo "Changes detected. Committing and pushing."
            # Stage and commit all changes in a single step
            git commit -m "Update Staging Chart.yaml with version $LAST_VERSION_TO_UPDATE"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update helm chart with image digest
        run: |
          # Ensure the DIGEST environment variable is set
          if [ -z "$DIGEST" ]; then
            echo "DIGEST environment variable is not set"
            exit 1
          fi

          # Use yq to update the image.hash field in values.yaml with the DIGEST value
          yq eval ".image.hash = \"$DIGEST\"" -i charts/secrets-store-csi-driver-provider-gcp/values.yaml
          yq eval ".image.hash = \"$DIGEST\"" -i manifest_staging/charts/secrets-store-csi-driver-provider-gcp/values.yaml

          git add charts/secrets-store-csi-driver-provider-gcp/values.yaml
          git add manifest_staging/charts/secrets-store-csi-driver-provider-gcp/values.yaml

          # Check if there are any changes
          if git diff --cached --exit-code; then
            echo "No changes detected. Skipping commit."
          else
            echo "Changes detected. Committing and pushing."
            # Stage and commit all changes in a single step
            git commit -m "Update manifest_staging value.yaml with DIGEST $DIGEST"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
